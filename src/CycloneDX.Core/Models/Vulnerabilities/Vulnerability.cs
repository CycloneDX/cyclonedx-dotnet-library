// This file is part of CycloneDX Library for .NET
//
// Licensed under the Apache License, Version 2.0 (the “License”);
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an “AS IS” BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
// Copyright (c) OWASP Foundation. All Rights Reserved.

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using System.Text.Json.Serialization;
using ProtoBuf;
using System.Linq;

namespace CycloneDX.Models.Vulnerabilities
{
    [ProtoContract]
    public class Vulnerability: IEquatable<Vulnerability>
    {
        [XmlAttribute("bom-ref")]
        [JsonPropertyName("bom-ref")]
        [ProtoMember(1)]
        public string BomRef { get; set; }

        [XmlElement("id")]
        [ProtoMember(2)]
        public string Id { get; set; }

        [XmlElement("source")]
        [ProtoMember(3)]
        public Source Source { get; set; }

        [XmlArray("references")]
        [XmlArrayItem("reference")]
        [ProtoMember(4)]
        public List<Reference> References { get; set; }
        public bool ShouldSerializeReferences() { return References?.Count > 0; }

        [XmlArray("ratings")]
        [XmlArrayItem("rating")]
        [ProtoMember(5)]
        public List<Rating> Ratings { get; set; }

        [XmlArray("cwes")]
        [XmlArrayItem("cwe")]
        [ProtoMember(6)]
        public List<int> CWES { get; set; }

        [XmlElement("description")]
        [ProtoMember(7)]
        public string Description { get; set; }

        [XmlElement("detail")]
        [ProtoMember(8)]
        public string Detail { get; set; }

        [XmlElement("recommendation")]
        [ProtoMember(9)]
        public string Recommendation { get; set; }

        [XmlElement("workaround")]
        [ProtoMember(21)]
        public string Workaround { get; set; }

        [XmlElement("proofOfConcept")]
        [ProtoMember(20)]
        public ProofOfConcept ProofOfConcept { get; set; }
        
        [XmlArray("advisories")]
        [XmlArrayItem("advisory")]
        [ProtoMember(10)]
        public List<Advisory> Advisories { get; set; }

        private DateTime? _created;
        [XmlElement("created")]
        [ProtoMember(11)]
        public DateTime? Created
        { 
            get => _created;
            set { _created = BomUtils.UtcifyDateTime(value); }
        }
        public bool ShouldSerializeCreated() { return Created != null; }
        
        private DateTime? _published;
        [XmlElement("published")]
        [ProtoMember(12)]
        public DateTime? Published
        { 
            get => _published;
            set { _published = BomUtils.UtcifyDateTime(value); }
        }
        public bool ShouldSerializePublished() { return Published != null; }
        
        private DateTime? _updated;
        [XmlElement("updated")]
        [ProtoMember(13)]
        public DateTime? Updated
        { 
            get => _updated;
            set { _updated = BomUtils.UtcifyDateTime(value); }
        }
        public bool ShouldSerializeUpdated() { return Updated != null; }
        
        private DateTime? _rejected;
        [XmlElement("rejected")]
        [ProtoMember(19)]
        public DateTime? Rejected
        { 
            get => _rejected;
            set { _rejected = BomUtils.UtcifyDateTime(value); }
        }
        public bool ShouldSerializeRejected() { return Rejected != null; }
        
        [XmlElement("credits")]
        [ProtoMember(14)]
        public Credits Credits { get; set; }

        [XmlElement("tools")]
        [ProtoMember(15)]
        public ToolChoices Tools { get; set; }
        public bool ShouldSerializeTools() => Tools != null && (Tools.Tools != null || Tools.Components != null || Tools.Services != null);

        [XmlElement("analysis")]
        [ProtoMember(16)]
        public Analysis Analysis { get; set; }

        [XmlArray("affects")]
        [XmlArrayItem("target")]
        [ProtoMember(17)]
        public List<Affects> Affects { get; set; }

        [XmlArray("properties")]
        [XmlArrayItem("property")]
        [ProtoMember(18)]
        public List<Property> Properties { get; set; }
        public bool ShouldSerializeProperties() { return Properties?.Count > 0; }

        public override bool Equals(object obj)
        {
            return Equals(obj as Vulnerability);
        }

        public bool Equals(Vulnerability obj)
        {
            return obj != null &&
                (object.ReferenceEquals(this.Advisories, obj.Advisories) ||
                this.Advisories.SequenceEqual(obj.Advisories)) &&
                (object.ReferenceEquals(this.Affects, obj.Affects) ||
                this.Affects.SequenceEqual(obj.Affects)) &&
                (object.ReferenceEquals(this.Analysis, obj.Analysis) ||
                this.Analysis.Equals(obj.Analysis)) &&
                (object.ReferenceEquals(this.BomRef, obj.BomRef) ||
                this.BomRef.Equals(obj.BomRef, StringComparison.InvariantCultureIgnoreCase)) &&
                (this.Created.Equals(obj.Created)) &&
                (object.ReferenceEquals(this.Credits, obj.Credits) ||
                this.Credits.Equals(obj.Credits)) &&
                (object.ReferenceEquals(this.CWES, obj.CWES) ||
                this.CWES.SequenceEqual(obj.CWES)) &&
                (object.ReferenceEquals(this.Description, obj.Description) ||
                this.Description.Equals(obj.Description, StringComparison.InvariantCultureIgnoreCase)) &&
                (object.ReferenceEquals(this.Detail, obj.Detail) ||
                this.Detail.Equals(obj.Detail, StringComparison.InvariantCultureIgnoreCase)) &&
                (object.ReferenceEquals(this.Id, obj.Id) ||
                this.Id.Equals(obj.Id, StringComparison.InvariantCultureIgnoreCase)) &&
                (object.ReferenceEquals(this.ProofOfConcept, obj.ProofOfConcept) ||
                this.ProofOfConcept.Equals(obj.ProofOfConcept)) &&
                (object.ReferenceEquals(this.Properties, obj.Properties) ||
                this.Properties.SequenceEqual(obj.Properties)) &&
                (this.Published.Equals(obj.Published)) &&
                (object.ReferenceEquals(this.Ratings, obj.Ratings) ||
                this.Ratings.SequenceEqual(obj.Ratings)) &&
                (object.ReferenceEquals(this.Recommendation, obj.Recommendation) ||
                this.Recommendation.Equals(obj.Recommendation, StringComparison.InvariantCultureIgnoreCase)) &&
                (object.ReferenceEquals(this.References, obj.References) ||
                this.References.SequenceEqual(obj.References)) &&
                (this.Rejected.Equals(obj.Rejected)) &&
                (object.ReferenceEquals(this.Source, obj.Source) ||
                this.Source.Equals(obj.Source)) &&
                (object.ReferenceEquals(this.Tools, obj.Tools) ||
                this.Tools.Equals(obj.Tools)) &&
                (this.Updated.Equals(obj.Updated)) &&
                (object.ReferenceEquals(this.Workaround, obj.Workaround) ||
                this.Workaround.Equals(obj.Workaround));
        }
    
        public override int GetHashCode()
        {
            return CycloneDX.Json.Serializer.Serialize(this).GetHashCode();
        }
    }
}
