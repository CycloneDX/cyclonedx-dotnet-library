// This file is part of CycloneDX Library for .NET
//
// Licensed under the Apache License, Version 2.0 (the “License”);
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an “AS IS” BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
// Copyright (c) OWASP Foundation. All Rights Reserved.

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using System.Text.Json.Serialization;
using ProtoBuf;
using System.Linq;

namespace CycloneDX.Models.Vulnerabilities
{
    [ProtoContract]
    public class Vulnerability : ICloneable, IEquatable<Vulnerability>
    {
        [XmlAttribute("bom-ref")]
        [JsonPropertyName("bom-ref")]
        [ProtoMember(1)]
        public string BomRef { get; set; }

        [XmlElement("id")]
        [ProtoMember(2)]
        public string Id { get; set; }

        [XmlElement("source")]
        [ProtoMember(3)]
        public Source Source { get; set; }

        [XmlArray("references")]
        [XmlArrayItem("reference")]
        [ProtoMember(4)]
        public List<Reference> References { get; set; }
        
        [XmlArray("ratings")]
        [XmlArrayItem("rating")]
        [ProtoMember(5)]
        public List<Rating> Ratings { get; set; }

        [XmlArray("cwes")]
        [XmlArrayItem("cwe")]
        [ProtoMember(6)]
        public List<int> CWES { get; set; }

        [XmlElement("description")]
        [ProtoMember(7)]
        public string Description { get; set; }

        [XmlElement("detail")]
        [ProtoMember(8)]
        public string Detail { get; set; }

        [XmlElement("recommendation")]
        [ProtoMember(9)]
        public string Recommendation { get; set; }

        [XmlElement("workaround")]
        [ProtoMember(21)]
        public string Workaround { get; set; }

        [XmlElement("proofOfConcept")]
        [ProtoMember(20)]
        public ProofOfConcept ProofOfConcept { get; set; }
        
        [XmlArray("advisories")]
        [XmlArrayItem("advisory")]
        [ProtoMember(10)]
        public List<Advisory> Advisories { get; set; }

        private DateTime? _created;
        [XmlElement("created")]
        [ProtoMember(11)]
        public DateTime? Created
        { 
            get => _created;
            set { _created = BomUtils.UtcifyDateTime(value); }
        }
        
        private DateTime? _published;
        [XmlElement("published")]
        [ProtoMember(12)]
        public DateTime? Published
        { 
            get => _published;
            set { _published = BomUtils.UtcifyDateTime(value); }
        }
        
        private DateTime? _updated;
        [XmlElement("updated")]
        [ProtoMember(13)]
        public DateTime? Updated
        { 
            get => _updated;
            set { _updated = BomUtils.UtcifyDateTime(value); }
        }
        
        private DateTime? _rejected;
        [XmlElement("rejected")]
        [ProtoMember(19)]
        public DateTime? Rejected
        { 
            get => _rejected;
            set { _rejected = BomUtils.UtcifyDateTime(value); }
        }
        
        [XmlElement("credits")]
        [ProtoMember(14)]
        public Credits Credits { get; set; }

        [XmlElement("tools")]
        [ProtoMember(15)]
        public ToolChoices Tools { get; set; }
        
        [XmlElement("analysis")]
        [ProtoMember(16)]
        public Analysis Analysis { get; set; }

        [XmlArray("affects")]
        [XmlArrayItem("target")]
        [ProtoMember(17)]
        public List<Affects> Affects { get; set; }

        [XmlArray("properties")]
        [XmlArrayItem("property")]
        [ProtoMember(18)]
        public List<Property> Properties { get; set; }
        
        public bool ShouldSerializeReferences() { return References?.Count > 0; }
        public bool ShouldSerializeCreated() { return Created != null; }
        public bool ShouldSerializePublished() { return Published != null; }
        public bool ShouldSerializeUpdated() { return Updated != null; }
        public bool ShouldSerializeRejected() { return Rejected != null; }
        public bool ShouldSerializeTools() => Tools != null && (Tools.Tools != null || Tools.Components != null || Tools.Services != null);
        public bool ShouldSerializeProperties() { return Properties?.Count > 0; }

        public override bool Equals(object obj)
        {
            var other = obj as Vulnerability;
            if (other == null)
            {
                return false;
            }

            return Json.Serializer.Serialize(this) == Json.Serializer.Serialize(other);
        }

        public bool Equals(Vulnerability obj)
        {
            return CycloneDX.Json.Serializer.Serialize(this) == CycloneDX.Json.Serializer.Serialize(obj);
        }
    
        public override int GetHashCode()
        {
            return CycloneDX.Json.Serializer.Serialize(this).GetHashCode();
        }

        public object Clone()
        {
            return new Vulnerability()
            {
                Advisories = this.Advisories.Select(x => (Advisory)x.Clone()).ToList(),
                Affects = this.Affects.Select(x => (Affects)x.Clone()).ToList(),
                Analysis = (Analysis)this.Analysis.Clone(),
                BomRef = this.BomRef,
                Created = this.Created,
                Credits = (Credits)this.Credits.Clone(),
                CWES = this.CWES.Select(x => x).ToList(),
                Description = this.Description,
                Detail = this.Detail,
                Id = this.Id,
                ProofOfConcept = (ProofOfConcept)this.ProofOfConcept.Clone(),
                Properties = this.Properties.Select(x => (Property)x.Clone()).ToList(),
                Published = this.Published,
                Ratings = this.Ratings.Select(x => (Rating)x.Clone()).ToList(),
                Recommendation = this.Recommendation,
                References = this.References.Select(x => (Reference)x.Clone()).ToList(),
                Rejected = this.Rejected,
                Source = (Source)this.Source.Clone(),
                Tools = (ToolChoices)this.Tools.Clone(),
                Updated = this.Updated,
                Workaround = this.Workaround,
            };
        }
    }
}
